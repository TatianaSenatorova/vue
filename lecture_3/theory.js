"use strict";

//компонентный подход для нас в приоритете
//у vue есть прямо отдельный метод component(). Он принимает два аргумента: название компонента и объект с настройками: Vue.component('some', {});
// Название может быт любым, но если оно состоит из нескольких слов, их принято разделять дефисом  Vue.component('some-component', {})
// Получается, что нам надо передавать значения. Главный параметр компонента - template, html-разметка. Напишем что-нибудь простое:
// Для чего мы создаем шаблон? чтобы добавить какой-то контент на страницу в  формате  html. поэтому козырем нашего компонента будет являться template

const app = new Vue({
  el: "#app",
  data: {},
});

//Vue с компонентным подходом очень вредный. как только мы создаем ошибочную ситуацию - смотрим в консоль. Не забываем бэктики. вью не нравится, когда добавляют два параграфа без общего блока (потому что два параграфа очень сложно скомпоновать)

// Создали сущность, которая содержит в себе имя и шаблон. Надо ее где-то позвать
// Проброс содержимого: для подстановки содержимого используется тег <slot>
Vue.component("some-component", {
  template: `<h2><slot></slot></h2>`,
  //отличие от data в вью без компонент в том, что здесь data становится функцией и пишется с return
  data() {
    return {
      name: "Frodo",
    };
  },
});
